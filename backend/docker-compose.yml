services:
  postgres:
    hostname: "${POSTGRES_HOST_NAME}"
    container_name: "${POSTGRES_HOST_NAME}"
    restart: on-failure
    image: postgres:16
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
      - "./init.sql:/docker-entrypoint-initdb.d/init.sql"
    networks:
      - local
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  python:
    hostname: "${APP_HOST_NAME}"
    container_name: "${APP_HOST_NAME}"
    build:
      context: .
      dockerfile: ./Dockerfile-python
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST_NAME: ${POSTGRES_HOST_NAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      APP_PORT: ${APP_PORT}
      APP_INITIAL_SUPERUSER_EMAIL: ${APP_INITIAL_SUPERUSER_EMAIL}
      APP_INITIAL_SUPERUSER_PASSWORD: ${APP_INITIAL_SUPERUSER_PASSWORD}
      APP_SENDER_EMAIL: ${APP_SENDER_EMAIL}
      APP_CLIENT_PASSWORD: ${APP_CLIENT_PASSWORD}
    ports:
      - "${APP_PORT}:${APP_PORT}"
    networks:
      - local

volumes:
  postgres_data:

networks:
  local:
    driver: bridge
